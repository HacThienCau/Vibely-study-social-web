openapi: 3.0.0
info:
  title: Vibely API
  description: API documentation for Vibely Learning Social Network
  version: 1.0.0
  contact:
    email: your-email@vibely.com

servers:
  - url: http://localhost:8080
    description: Local Development Server
  - url: https://api.vibely.com
    description: Production Server

tags:
  - name: Authentication
    description: Authentication and authorization endpoints
  - name: Users
    description: User management operations
  - name: Posts
    description: Social posts operations
  - name: Comments
    description: Comment operations
  - name: Stories
    description: Story operations
  - name: Quiz
    description: Quiz management
  - name: Study Sets
    description: Study sets operations
  - name: Notifications
    description: Notification management

paths:
  # 1️⃣ AUTHENTICATION ENDPOINTS
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Invalid credentials

  /auth/register:
    post:
      tags: [Authentication]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid input data

  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Reset email sent
        404:
          description: User not found

  /auth/reset-password:
    post:
      tags: [Authentication]
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        200:
          description: Password reset successful
        400:
          description: Invalid token

  # 2️⃣ USER ENDPOINTS
  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

  # 3️⃣ POST ENDPOINTS
  /posts:
    get:
      tags: [Posts]
      summary: Get all posts
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        200:
          description: List of posts
    post:
      tags: [Posts]
      summary: Create new post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          description: Post created successfully

  # 4️⃣ QUIZ ENDPOINTS
  /quizzes:
    get:
      tags: [Quiz]
      summary: Get all quizzes
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of quizzes
    post:
      tags: [Quiz]
      summary: Create new quiz
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        201:
          description: Quiz created successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        avatar:
          type: string
        createdAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        images:
          type: array
          items:
            type: string
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    Quiz:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'

    Question:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        options:
          type: array
          items:
            type: string
        correctAnswer:
          type: integer

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT